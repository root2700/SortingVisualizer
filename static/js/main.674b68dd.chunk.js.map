{"version":3,"sources":["SortingVisualizer/sortingAlgorithms.js","SortingVisualizer/QuickSort.js","SortingVisualizer/SortingVisualizer.jsx","SortingVisualizer/InsertionSort.js","SortingVisualizer/SelectionSort.js","App.js","reportWebVitals.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","getQuickSortAnimations","auxillaryArray","quickSort","javaScriptSortedArray","sort","a","b","console","log","firstArray","secondArray","arraysAreEqual","startIndex","endIndex","pivotIndex","pivotValue","swap","partitionArray","firstIndex","secondIndex","temp","PRIMARY_COLOR","SECONDARY_COLOR","SortingVisualizer","props","state","this","resetArray","randomIntFromInterval","setState","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","isColorChange","barOneIndex","barTwoIndex","barIndex","barStyle","start","end","key","insertionSort","getInsertionSortAnimations","minIndex","min","t","selectionSort","getSelectionSortAnimations","getBubbleSortAnimations","i1","i2","mergeSortedArray","class","className","map","value","idx","onClick","mergeSort","heapSort","bubbleSort","InsertionSort","SelectionSort","React","Component","max","random","arrayOne","arrayTwo","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.674b68dd.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  const auxiliaryArray = array.slice(); //creaing a copy of mainarray \r\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n  return animations;\r\n}\r\n\r\nexport function getBubbleSortAnimations(array){ \r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  for(let i=0;i<array.length;++i){\r\n    for(let j =0;j<array.length-1-i;++j){\r\n      animations.push([j,j+1]); //red color \r\n      animations.push([j,j+1]); // remove red color \r\n      \r\n      if(array[j] > array[j+1]){\r\n        animations.push([j,j+1]);\r\n        let t = array[j];\r\n        array[j]= array[j+1];\r\n        array[j+1]= t;\r\n      }\r\n      else{\r\n        animations.push([-1,-1])\r\n      }\r\n    }\r\n  }\r\n  \r\n  console.log(array)\r\n  return animations;\r\n}\r\n\r\n\r\n// export function QuickSortAnimations(array){\r\n//   let animations = [];\r\n//   quickSortHelper(array,0,array.length -1,animations);\r\n//   return animations;\r\n// }\r\n//  export function quickSortHelper(arr,start,end,animations){\r\n//     if(start >=end){\r\n//       return;\r\n//     }\r\n//     let index = partition(arr,start,end);\r\n//     quickSortHelper(arr,start,index-1,animations)\r\n//     quickSortHelper(arr,index+1,end,animations)\r\n//   }\r\n\r\n//   function partition(arr,start,end,animations){\r\n//     let pivotIndex = start;\r\n//     let pivotValue = arr[end];\r\n//     for(let i = start;i<end;++i){\r\n//       // animations.push([pivotValue,i])\r\n//       // animations.push([pivotValue,i])\r\n//       if(arr[i]<pivotValue){\r\n//         let t = arr[i];\r\n//         arr[i] = arr[pivotIndex];\r\n//         arr[pivotIndex] = t;\r\n//         // animations.push([pivotValue,i,pivotIndex])\r\n//         pivotIndex++;\r\n//       }\r\n      \r\n//     }\r\n//       let i = end;\r\n//         let t = arr[i];\r\n//         arr[i] = arr[pivotIndex];\r\n//         arr[pivotIndex] = t;\r\n//   }\r\n\r\n\r\nfunction mergeSortHelper(\r\n  mainArray,\r\n  startIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations,\r\n) {\r\n  if (startIdx === endIdx) return;\r\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(\r\n  mainArray,\r\n  startIdx,\r\n  middleIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations,\r\n) {\r\n  let k = startIdx;\r\n  let i = startIdx;\r\n  let j = middleIdx + 1;\r\n  while (i <= middleIdx && j <= endIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i, j]);\r\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    } else {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n\r\n  //remaining part of the sub arrays: \r\n  \r\n  while (i <= middleIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i, i]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i, i]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index i in the auxiliary array.\r\n    animations.push([k, auxiliaryArray[i]]);\r\n    mainArray[k++] = auxiliaryArray[i++];\r\n  }\r\n  while (j <= endIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([j, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([j, j]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index j in the auxiliary array.\r\n    animations.push([k, auxiliaryArray[j]]);\r\n    mainArray[k++] = auxiliaryArray[j++];\r\n  }\r\n}\r\n\r\n","export function getQuickSortAnimations(array) {\n    let animations  = [];\n    let auxillaryArray = array.slice();\n    quickSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction quickSort(auxillaryArray, startIndex, endIndex, animations) {\n    let pivotIndex;\n    if (startIndex < endIndex) {\n        pivotIndex = partitionArray(auxillaryArray, startIndex, endIndex, animations);\n        quickSort(auxillaryArray, startIndex, pivotIndex - 1, animations);\n        quickSort(auxillaryArray, pivotIndex + 1, endIndex, animations);\n    }\n}\n\nfunction partitionArray(auxillaryArray, startIndex, endIndex, animations) {\n    let pivotValue = endIndex;\n    \n    let pivotIndex = startIndex;\n\n    for(let i = startIndex; i < endIndex; ++i) {\n        animations.push([\"comparision1\", i, pivotValue]);\n        animations.push([\"comparision2\", i, pivotValue]);\n        if(auxillaryArray[i] <= auxillaryArray[pivotValue]) {\n            //whole swap function: \n\n            animations.push([\"comparision1\", i, pivotIndex]);\n            animations.push([\"swap\", i, auxillaryArray[pivotIndex]]);\n            animations.push([\"swap\", pivotIndex, auxillaryArray[i]]);\n            animations.push([\"comparision2\", i, pivotIndex]);\n            swap(auxillaryArray, i, pivotIndex);\n\n\n            pivotIndex++;\n        }\n    }\n    animations.push([\"pivot1\", pivotIndex, pivotValue]);\n    animations.push([\"swap\", pivotValue, auxillaryArray[pivotIndex]]);\n    animations.push([\"swap\", pivotIndex, auxillaryArray[pivotValue]]);\n    animations.push([\"pivot2\", pivotIndex, pivotValue]);\n    \n    swap(auxillaryArray, pivotIndex, pivotValue);\n    return pivotIndex;\n\n    // let pivot = auxillaryArray[endIndex];\n    // let pivotIndex = startIndex;\n    // for (let i = startIndex; i <= endIndex - 1; i++) {\n    //     animations.push([i, endIndex]);\n    //     animations.push([i, endIndex]);\n    //     if (auxillaryArray[i] <= pivot) {\n    //         //Swap these two heights\n    //         animations.push([i, auxillaryArray[pivotIndex]]);\n    //         animations.push([pivotIndex, auxillaryArray[i]]);\n    //         swap(auxillaryArray, i , pivotIndex);\n    //         pivotIndex++;\n    //     }\n    //     else {\n    //         animations.push([-1, -1]);\n    //         animations.push([-1, -1]);\n    //     }\n    //     animations.push([-1, -1]);\n    //     animations.push([-1, -1]);\n    // }\n    // animations.push([-1, -1]);\n    // animations.push([-1, -1]);\n    // animations.push([-1, -1]);\n    // animations.push([-1, -1]);\n    // //Swap these two heights\n    // animations.push([pivotIndex, auxillaryArray[endIndex]]);\n    // animations.push([endIndex, auxillaryArray[pivotIndex]]);\n    // swap(auxillaryArray, pivotIndex, endIndex);\n    // return pivotIndex;\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n    let temp = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temp;\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n      if (firstArray[i] !== secondArray[i]) {\n        return false;\n      }\n    }\n    return true;\n}\n\nfunction randomIntFromInterval(min, max) {\n    // min and max included\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}","import React from 'react';\r\nimport {getMergeSortAnimations,getBubbleSortAnimations,QuickSortAnimations} from './sortingAlgorithms.js';\r\nimport './SortingVisualizer.css';\r\nimport { getQuickSortAnimations } from './QuickSort.js';\r\nimport { getInsertionSortAnimations } from './InsertionSort.js';\r\nimport { getSelectionSortAnimations } from './SelectionSort.js';\r\n// Change this value for the speed of the animations.\r\nconst ANIMATION_SPEED_MS = 5;\r\n\r\n// Change this value for the number of bars (value) in the array.\r\nconst NUMBER_OF_ARRAY_BARS = 100;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = 'white';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'red';\r\n\r\nconst PIVOT = 'turquoise'\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      array: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.resetArray();\r\n  }\r\n\r\n\r\n  resetArray() {\r\n    const array = [];\r\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n      array.push(randomIntFromInterval(5, 800));\r\n    }\r\n    this.setState({array});\r\n  }\r\n\r\n  \r\n  mergeSort() {\r\n  \r\n    const animations = getMergeSortAnimations(this.state.array);\r\n\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const isColorChange = i % 3 !== 2;  //because at 2 we are reverting the colors \r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n    \r\n  }\r\n\r\n  quickSort() {\r\n        const [animations,sortArray] = getQuickSortAnimations(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const isColorChange = animations[i][0] == \"comparision1\" || animations[i][0] == \"comparision2\";\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            if(isColorChange === true) {\r\n                const color = (animations[i][0] == \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                const [comparision, barOneIndex, barTwoIndex] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIndex].style;\r\n                const barTwoStyle = arrayBars[barTwoIndex].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                },i * ANIMATION_SPEED_MS);\r\n            }\r\n            else if(animations[i][0] == \"pivot1\" || animations[i][0] == \"pivot2\"){\r\n               const color = (animations[i][0] == \"pivot1\") ? PIVOT : PRIMARY_COLOR;\r\n                const [pivot, barOneIndex, barTwoIndex] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIndex].style;\r\n                const barTwoStyle = arrayBars[barTwoIndex].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                },i * ANIMATION_SPEED_MS);\r\n            }\r\n            else {\r\n                const [swap, barIndex, newHeight] = animations[i];\r\n                if (barIndex === -1) {\r\n                    continue;\r\n                }\r\n                const barStyle = arrayBars[barIndex].style;\r\n                setTimeout(() => {\r\n                    barStyle.height = `${newHeight}px`;\r\n                },i * ANIMATION_SPEED_MS);  \r\n            }        }\r\n        \r\n  }\r\n\r\n InsertionSort(){\r\n    const [animations,sortArray] = getInsertionSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n            const isColorChange = animations[i][0] == \"comparision1\" || animations[i][0] == \"comparision2\";\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            if(isColorChange === true) {\r\n                const color = (animations[i][0] == \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                const [comparision, barOneIndex, barTwoIndex] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIndex].style;\r\n                const barTwoStyle = arrayBars[barTwoIndex].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                },i * ANIMATION_SPEED_MS);\r\n            }\r\n            else {\r\n                const [swap, barIndex, newHeight] = animations[i];\r\n                if (barIndex === -1) {\r\n                    continue;\r\n                }\r\n                const barStyle = arrayBars[barIndex].style;\r\n                setTimeout(() => {\r\n                    barStyle.height = `${newHeight}px`;\r\n                },i * ANIMATION_SPEED_MS);  \r\n            }        }\r\n            \r\n\r\n }\r\n\r\nSelectionSort(){\r\n  const [animations,sortArray] = getSelectionSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n            const isColorChange = animations[i][0] == \"comparision1\" || animations[i][0] == \"comparision2\";\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            if(isColorChange === true) {\r\n                const color = (animations[i][0] == \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                const [comparision, barOneIndex, barTwoIndex] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIndex].style;\r\n                const barTwoStyle = arrayBars[barTwoIndex].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                },i * ANIMATION_SPEED_MS);\r\n            }\r\n            else {\r\n                const [swap, barIndex, newHeight] = animations[i];\r\n                if (barIndex === -1) {\r\n                    continue;\r\n                }\r\n                const barStyle = arrayBars[barIndex].style;\r\n                setTimeout(() => {\r\n                    barStyle.height = `${newHeight}px`;\r\n                },i * ANIMATION_SPEED_MS);  \r\n            }        }\r\n            \r\n\r\n}\r\n  heapSort() {\r\n    \r\n  }\r\n\r\n  bubbleSort() {\r\n    const animations = getBubbleSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const isColorChange = i % 3 !== 2;  //because at 2 we are reverting the colors \r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          if(animations[i][0] != -1){\r\n          const [i1,i2] = animations[i];\r\n          const barOneStyle = arrayBars[i1].style;\r\n          const barTwoStyle = arrayBars[i2].style;\r\n\r\n          const t = barTwoStyle.height;\r\n          barTwoStyle.height = barOneStyle.height;\r\n          barOneStyle.height = t;\r\n         \r\n          }\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  // NOTE: This method will only work if your sorting algorithms actually return\r\n  // the sorted arrays; if they return the animations (as they currently do), then\r\n  // this method will be broken.\r\n  testSortingAlgorithms() {\r\n    for (let i = 0; i < 100; i++) {\r\n      const array = [];\r\n      const length = randomIntFromInterval(1, 1000);\r\n      for (let i = 0; i < length; i++) {\r\n        array.push(randomIntFromInterval(-1000, 1000));\r\n      }\r\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n      const mergeSortedArray = getMergeSortAnimations(array.slice());\r\n      console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {array} = this.state;\r\n\r\n    return (\r\n      <div class = \"content\">\r\n      <div className=\"array-container\">\r\n        {array.map((value, idx) => (\r\n          <div\r\n            className=\"array-bar\"\r\n            key={idx}\r\n            style={{\r\n              backgroundColor: PRIMARY_COLOR,\r\n              height: `${value}px`,\r\n            }}></div>\r\n        ))}\r\n      </div>\r\n       <div class =\"buttons\">\r\n          <button onClick={() => this.resetArray()}>Generate New Array</button>\r\n        <button onClick={() => this.mergeSort() }>Merge Sort</button>\r\n        <button onClick={() => this.quickSort()}>Quick Sort</button>\r\n        <button onClick={() => this.heapSort()}>Heap Sort</button>\r\n        <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n        <button onClick={() => this.InsertionSort()}>Insertion Sort</button>\r\n        <button onClick={() => this.SelectionSort()}>Selection Sort</button>\r\n        </div>\r\n        </div>\r\n      \r\n    );\r\n  }\r\n}\r\n\r\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\r\nfunction randomIntFromInterval(min, max) {\r\n  // min and max included\r\n  return 0.7* Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nfunction arraysAreEqual(arrayOne, arrayTwo) {\r\n  if (arrayOne.length !== arrayTwo.length) return false;\r\n  for (let i = 0; i < arrayOne.length; i++) {\r\n    if (arrayOne[i] !== arrayTwo[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n// function disableAll(){\r\n//     buttons = document.querySelectorAll(\"buttton\");\r\n\r\n// }","export function getInsertionSortAnimations(array) {\r\n    let animations  = [];\r\n    let auxillaryArray = array.slice();\r\n    insertionSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\r\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n    console.log(\"Sort Validation :  \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\r\n    array = auxillaryArray;\r\n    console.log(array)\r\n    return [animations, array];\r\n}\r\n\r\n\r\nfunction insertionSort(a,start,end,animations){\r\n    for(let i = 1;i<=end;++i){\r\n        let key = a[i];\r\n        let j = i-1;\r\n\r\n        while(j>=0 && a[j] > key){\r\n            animations.push([\"comparision1\", j,j+1]);\r\n            animations.push([\"swap\", j+1, a[j]]);\r\n            animations.push([\"comparision2\", j, j+1]);\r\n            a[j+1] = a[j];\r\n            --j;\r\n        }\r\n\r\n        animations.push([\"comparision1\", i,j+1]);\r\n        animations.push([\"swap\", j+1, key]);\r\n        animations.push([\"comparision2\", i, j+1]);\r\n\r\n        a[j+1] = key;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nfunction arraysAreEqual(firstArray, secondArray) {\r\n    if (firstArray.length !== secondArray.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < firstArray.length; i++) {\r\n      if (firstArray[i] !== secondArray[i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n}","export function getSelectionSortAnimations(array) {\r\n    let animations  = [];\r\n    let auxillaryArray = array.slice();\r\n    selectionSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\r\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n    console.log(\"Sort Validation :  \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\r\n    array = auxillaryArray;\r\n    console.log(array)\r\n    return [animations, array];\r\n}\r\n\r\n\r\nfunction selectionSort(a,start,end,animations){\r\n    for(let i = 0;i<=end;++i){\r\n        let minIndex = i;\r\n        let min = a[i];\r\n        \r\n        for(let j=i+1;j<=end;++j){\r\n            animations.push([\"comparision1\",j,minIndex])\r\n            animations.push([\"comparision2\",j,minIndex])\r\n            if(a[j] < min ){\r\n                min = a[j];\r\n                minIndex = j;\r\n            }\r\n        }\r\n\r\n        animations.push([\"comparision1\", i,minIndex]);\r\n        animations.push([\"swap\", i, a[minIndex]]);\r\n        animations.push([\"swap\", minIndex, a[i]]);\r\n        animations.push([\"comparision2\", i, minIndex]);\r\n\r\n        let t = a[i];\r\n        a[i]= a[minIndex];\r\n        a[minIndex] = t;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nfunction arraysAreEqual(firstArray, secondArray) {\r\n    if (firstArray.length !== secondArray.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < firstArray.length; i++) {\r\n      if (firstArray[i] !== secondArray[i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n}","\nimport React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}